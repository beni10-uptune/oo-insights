generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContentPage {
  id             String       @id @default(uuid())
  url            String       @unique
  domain         String
  path           String
  market         String?
  language       String?
  title          String?
  description    String?
  rawHtml        String?      @db.Text
  textContent    String?      @db.Text
  wordCount      Int?
  tags           String[]
  isArticle      Boolean      @default(false)
  source         String       @default("firecrawl")
  publishDate    DateTime?    // Actual publish date from sitemap
  lastCrawledAt  DateTime?
  lastModifiedAt DateTime?
  changeHash     String?
  changePct      Float?
  embedding      Bytes?
  summary        String?      @db.Text
  summaryEn      String?      @db.Text  // Always in English
  category       String?      // MECE category: HCP, CVD, Menopause, etc.
  contentType    String?      // Type: article, tool, video, homepage, etc.
  subcategory    String?
  confidence     Float?       // AI categorization confidence
  keywords       String[]     // Extracted keywords for category
  hasHcpLocator  Boolean?     @default(false)
  hasVideo       Boolean      @default(false)
  hasCalculator  Boolean      @default(false)
  hasForm        Boolean      @default(false)
  readingTime    Int?         // Estimated reading time in minutes
  signals        Json?
  crawlError     String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  events         PageEvent[]
  changes        PageChange[]
  metrics        PageMetrics?

  @@index([market, category])
  @@index([contentType])
  @@index([publishDate])
  @@index([market, publishDate])
  @@map("content_pages")
}

model PageEvent {
  id        String      @id @default(uuid())
  page      ContentPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String
  url       String
  eventType String
  market    String?
  language  String?
  title     String?
  changePct Float?
  summary   String?     @db.Text
  category  String?
  eventAt   DateTime    @default(now())
  createdAt DateTime    @default(now())

  @@map("page_events")
}

model PageChange {
  id                String      @id @default(uuid())
  page              ContentPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId            String
  changeType        String
  changeDescription String?     @db.Text
  oldContentHash    String
  newContentHash    String
  changedAt         DateTime    @default(now())
  createdAt         DateTime    @default(now())

  @@map("page_changes")
}

model RssSource {
  id        String       @id @default(uuid())
  name      String
  feedUrl   String       @unique
  market    String?
  language  String?
  topicTags String[]
  active    Boolean      @default(true)
  createdAt DateTime     @default(now())
  articles  RssArticle[]

  @@map("rss_sources")
}

model RssArticle {
  id                 String     @id @default(uuid())
  source             RssSource? @relation(fields: [sourceId], references: [id])
  sourceId           String?
  guid               String?
  title              String
  url                String     @unique
  publishedAt        DateTime?
  author             String?
  rawContent         String?    @db.Text
  normalizedLanguage String?
  market             String?
  topics             String[]
  entities           Json?
  summary            String?    @db.Text
  relevanceScore     Float?
  embedding          Bytes?
  createdAt          DateTime   @default(now())

  @@map("rss_articles")
}

model UserPreference {
  id             String   @id @default(uuid())
  userEmail      String   @unique
  markets        String[]
  languages      String[]
  topics         String[]
  digestFrequency String   @default("weekly")
  createdAt      DateTime @default(now())

  @@map("user_preferences")
}

model Digest {
  id          String   @id @default(uuid())
  userEmail   String
  periodStart DateTime
  periodEnd   DateTime
  market      String?
  language    String?
  topicFocus  String[]
  articleIds  String[]
  emailStatus String?
  createdAt   DateTime @default(now())

  @@map("digests")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // For email/password auth
  role          String    @default("USER")
  markets       String[]  @default([])
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Central Markets reference table for consistent market data across all features
model Market {
  id            String   @id @default(uuid())
  code          String   @unique // e.g., "de", "fr", "ca_en"
  name          String   // e.g., "Germany", "France", "Canada English"
  region        String   // e.g., "Europe", "North America"
  country       String   // e.g., "Germany", "France", "Canada"
  countryCode   String   // ISO country code: "DE", "FR", "CA"
  language      String   // e.g., "de", "fr", "en"
  languageCode  String   // ISO language code: "de-DE", "fr-FR", "en-CA"
  websiteUrl    String   // e.g., "https://www.ueber-gewicht.de/"
  sitemapUrl    String?  // e.g., "https://www.ueber-gewicht.de/sitemap.xml"
  domain        String   // e.g., "ueber-gewicht.de"
  timezone      String   // e.g., "Europe/Berlin"
  flag          String?  // emoji flag
  isCore        Boolean  @default(false) // true for core EUCAN markets
  isActive      Boolean  @default(true)
  priority      Int      @default(100) // lower number = higher priority
  metadata      Json?    // additional market-specific config
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([region])
  @@index([country])
  @@index([isCore])
  @@map("markets")
}

// Tracking of market data collection jobs
model MarketDataJob {
  id           String   @id @default(uuid())
  marketCode   String   // references Market.code
  jobType      String   // e.g., "crawl", "trends", "competitors"
  status       String   // e.g., "pending", "running", "completed", "failed"
  startedAt    DateTime?
  completedAt  DateTime?
  itemsProcessed Int?
  errors       Json?
  metadata     Json?
  createdAt    DateTime @default(now())

  @@index([marketCode, jobType])
  @@index([status])
  @@map("market_data_jobs")
}

// Search trends data tables
model TrendsSeries {
  id          String   @id @default(uuid())
  marketCode  String   // references Market.code
  keyword     String
  date        DateTime
  value       Float    // normalized 0-100 trend value
  dataSource  String   @default("dataforseo") // or "google_trends"
  createdAt   DateTime @default(now())

  @@unique([marketCode, keyword, date])
  @@index([marketCode])
  @@index([keyword])
  @@index([date])
  @@map("trends_series")
}

model TopVolumeQueries {
  id             String   @id @default(uuid())
  marketCode     String   // references Market.code
  keyword        String
  searchVolume   Int
  cpc            Float?
  competition    Float?
  monthlyVolumes Json?    // array of {month: string, volume: int}
  lastUpdated    DateTime @default(now())
  createdAt      DateTime @default(now())

  @@unique([marketCode, keyword])
  @@index([marketCode])
  @@index([searchVolume])
  @@map("top_volume_queries")
}

model RelatedQueries {
  id           String   @id @default(uuid())
  marketCode   String   // references Market.code
  seedKeyword  String
  keyword      String
  searchVolume Int?
  relevance    Float?
  trendGrowth  Float?   // growth percentage
  lastUpdated  DateTime @default(now())
  createdAt    DateTime @default(now())

  @@index([marketCode, seedKeyword])
  @@index([marketCode])
  @@map("related_queries")
}

// Page-level metrics to connect content with performance data
model PageMetrics {
  id             String      @id @default(uuid())
  page           ContentPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId         String      @unique
  
  // Traffic metrics (from GSC or analytics)
  impressions    Int         @default(0)
  clicks         Int         @default(0)
  ctr            Float?      // Click-through rate
  avgPosition    Float?      // Average search position
  
  // Engagement metrics
  avgTimeOnPage  Float?      // In seconds
  bounceRate     Float?      // Percentage
  exitRate       Float?      // Percentage
  
  // Content performance
  socialShares   Int         @default(0)
  backlinks      Int         @default(0)
  
  // Category analytics
  categoryViews  Json?       // Views broken down by user segment
  conversionRate Float?      // If tracking conversions
  
  // Time-based data
  period         String      // e.g., "2024-01", "2024-W01", "2024-Q1"
  lastUpdated    DateTime    @default(now())
  createdAt      DateTime    @default(now())
  
  @@index([pageId, period])
  @@index([period])
  @@map("page_metrics")
}